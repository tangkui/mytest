Spring事物管理（SpringTransActionManager）

    初步理解：

    理解事务之前，先讲一个你日常生活中最常干的事：取钱。
    比如你去ATM机取1000块钱，大体有两个步骤：首先输入密码金额，银行卡扣掉1000元钱；然后ATM出1000元钱。这两个步骤必须是要么都执行要么都不执行。
    如果银行卡扣除了1000块但是ATM出钱失败的话，你将会损失1000元；如果银行卡扣钱失败但是ATM却出了1000块，那么银行将损失1000元。所以，
    如果一个步骤成功另一个步骤失败对双方都不是好事，如果不管哪一个步骤失败了以后，整个取钱过程都能回滚，也就是完全取消所有操作的话，这对双方都是极好的。
    事务就是用来解决类似问题的。事务是一系列的动作，它们综合在一起才是一个完整的工作单元，这些动作必须全部完成，如果有一个失败的话，
    那么事务就会回滚到最开始的状态，仿佛什么都没发生过一样。

    在企业级应用程序开发中，事务管理必不可少的技术，用来确保数据的完整性和一致性。

    事物有四个特性：

        原子性(Atomicity)：事物是一个原子操作，由一系列动作组成。事物的原子性确保动作要么全部完成，要么完全不起作用。

        一致性(Consistency)：一旦事物完成（不管成功还是失败），系统必须确保它所建模的业务处于一致性的状态，而不会是部分完成部分失败。
                             在现实中的数据不应该被破坏。

        隔离性(lsolation)：可能有许多事物会同时处理相同的数据，因此每个事物都应该与其他事物隔离出来，防止数据损坏。

        持久性(Durbility)：一旦事物完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。
                           通常情况下，事物的结果被写到持久化存储器中。

     核心接口：
        Spring事务管理的实现有许多细节，如果对整个接口框架有个大体了解会非常有利于我们理解事务，
        下面通过讲解Spring的事务接口来了解Spring实现事务的具体策略。
        Spring事务管理涉及的接口的联系如下：

        图：Spring事物涉及的接口以及联系.jpg


     Spring事物管理器：

        Spring并不直接管理事务，而是提供了多种事物管理器，他们将事物管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事物来实现。
        Spring事物管理器的接口是org.springframework.transaction.PlatformTransactionManager,通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了
        对应的事物管理器，但是具体的实现就是各个平台自己的事。此接口的内容如下：

        public interface PlatformTransactionManager()...{

            //由TransactionDefinition得到TransactionStatus对象
            TransactionStatus getTransaction(TransactionDefinition definition)throws TransactionException;

        }
