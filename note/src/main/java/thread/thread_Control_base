JAVA中线程控制：线程同步，线程中断，线程合并，线程优先级等。

        1、线程同步（synchronized）：

                synchronized是java中的关键字，是一种同步锁。它修饰的对象有以下几种：
                1）、修饰一个代码块，被修饰的代码块称为同步代码块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象。
                2）、修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。
                3）、修饰一个静态方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。
                4）、修饰一个类，其作用范围是synchronized后面括号括起来的部分，作用的主的对象是这个类的所有对象。

               注意：
               1）、一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞。
               2）、当一个线程访问对象的一个synchroniezed(this)同步代码块时，另一个线程仍然可以访问该对象中的非synchronized(this)同步代码块。
               3）、虽然可以使用synchronized来定义方法，但synchronized并不属于方法定义的一部分，因此，synchronized关键字不能被继承。
                    如果在父类中的某个方法使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，
                    而必须显式地在子类的这个方法中加上synchronized关键字才可以。当然，还可以在子类方法中调用父类中相应的方法，
                    这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此，子类的方法也就相当于同步了。
                4）、在定义接口方法时不能使用synchronized关键字。
                5）、构造方法不能使用synchronized关键字，但可以使用synchronized代码块来进行同步。

                总结：
                1）、无论synchronized关键字是加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象，
                     如果synchronized作用的对象是一个静态方法或者一个类，则它取得的锁是对类，该类所有的对象同一把锁。
                2）、每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。
                3）、实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。



        2、线程中断（interrupt）：

                JAAV提供的线程支持类中，有三个方法与线程中断有关：
                        A、public void interrput();//中断线程
                        B、public static boolean interrputed();//静态方法，用于测试当前线程是否是否已经中断（已经中断返回true，未被中断返回false），
                        并将线程的中断状态清除。如果线程已经被中断，那么，调用两次interrputed,第一次返回true，第二次返回false，因为第一次返回true后会清楚中断状态。
                        C、public boolean isInterrputed();//测试线程是否已经中断（中断：返回true，未中断：返回true）


         3、线程合并（join）：

                线程合并就是等其他线程执行完，再执行当前线程，执行起来的效果就好像把其他线程合并到当前线程执行一样。

                public final void join()
                等待该线程终止

                public final void join(long millis);
                等待该线程终止的时间最长为 millis 毫秒。超时为 0 意味着要一直等下去。

                public final void join(long millis, int nanos)
                等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒


          4、线程优先级（Priority）：

                线程优先级是指获得CPU资源的优先程序，优先级高的容易获得CPU资源，优先级低的较难获得CPU资源，
                表现出来的情况就是优先级越高，执行的时间越多(注意：此处是执行的时间越多，并不是执行的越快或者优先执行)。

                Java中通过getPriority和setPriority方法获取和设置线程的优先级。
                Thread类提供了三个表示优先级的常量：MIN_PRIORITY优先级最低，为1；NORM_PRIORITY是正常的优先级；为5，MAX_PRIORITY优先级最高，为10。
                我们创建线程对象后，如果不显示的设置优先级的话，默认为5






